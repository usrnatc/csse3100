method ComputeFusc(N: int) returns (b: int)
    requires N >= 0
    ensures b == fusc(N)
{
    b := 0;
    var n, a := N, 1;
    while (n != 0)
        invariant fusc(N) == a * fusc(n) + b * fusc(n + 1)
    {
        if (n % 2 == 0) {
            a := a + b;
            n := n / 2;
        } else {
            b := b + a;
            n := (n - 1) / 2;
        }
    }
}